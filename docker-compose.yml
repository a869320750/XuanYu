version: '3.8'

services:
  # 开发环境
  dev:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: xuanyu-dev
    volumes:
      - .:/workspace
      - xuanyu-build:/workspace/build
    working_dir: /workspace
    environment:
      - CMAKE_BUILD_TYPE=Debug
      - BUILD_TESTS=ON
    ports:
      - "8080:8080"    # 示例服务端口
      - "8081:8081"    # 测试端口
    stdin_open: true
    tty: true
    command: shell

  # 测试环境
  test:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: xuanyu-test
    volumes:
      - .:/workspace
      - xuanyu-test-build:/workspace/build
    working_dir: /workspace
    environment:
      - CMAKE_BUILD_TYPE=Debug
      - BUILD_TESTS=ON
      - ENABLE_COVERAGE=ON
    # 临时以 root 用户运行以避免宿主机挂载导致的权限问题
    user: root
    command: test
    depends_on:
      - dev

  # 性能测试环境
  benchmark:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: xuanyu-benchmark
    volumes:
      - .:/workspace
      - xuanyu-benchmark-build:/workspace/build
    working_dir: /workspace
    environment:
      - CMAKE_BUILD_TYPE=Release
      - BUILD_BENCHMARKS=ON
    command: benchmark
    
  # 示例演示环境
  demo:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: xuanyu-demo
    volumes:
      - .:/workspace
      - xuanyu-demo-build:/workspace/build
    working_dir: /workspace
    environment:
      - CMAKE_BUILD_TYPE=Release
      - BUILD_EXAMPLES=ON
    ports:
      - "9090:9090"
    # Temporarily run build & demo as root to avoid host-mounted volume permission issues.
    # Remove `user: root` after fixing volume ownership in CI/production.
    user: root
    command: |
      bash -c "
        mkdir -p build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=ON
        make -j$$(nproc)
        echo 'Demo环境准备就绪，可以运行示例程序'
        ./bin/echo_server
      "

  # 多容器测试 - 服务端
  test-server:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: xuanyu-test-server
    volumes:
      - .:/workspace
    working_dir: /workspace
    environment:
      - CMAKE_BUILD_TYPE=Debug
      - BUILD_EXAMPLES=ON
    ports:
      - "8888:8888"
    networks:
      - xuanyu-test-net
    command: |
      bash -c "
        mkdir -p build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_EXAMPLES=ON
        make -j$$(nproc)
        ./bin/echo_server --port=8888
      "

  # 多容器测试 - 客户端
  test-client:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: xuanyu-test-client
    volumes:
      - .:/workspace
    working_dir: /workspace
    environment:
      - CMAKE_BUILD_TYPE=Debug
      - BUILD_EXAMPLES=ON
    networks:
      - xuanyu-test-net
    depends_on:
      - test-server
    command: |
      bash -c "
        sleep 5  # 等待服务端启动
        mkdir -p build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_EXAMPLES=ON
        make -j$$(nproc)
        ./bin/echo_client --server=test-server --port=8888
      "

  # CI/CD环境
  ci:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: xuanyu-ci
    volumes:
      - .:/workspace
    working_dir: /workspace
    environment:
      - CMAKE_BUILD_TYPE=Release
      - BUILD_TESTS=ON
      - BUILD_EXAMPLES=ON
      - ENABLE_COVERAGE=ON
    command: |
      bash -c "
        echo '开始CI/CD流水线...'
        mkdir -p build && cd build
        
        # 配置构建
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON -DENABLE_COVERAGE=ON
        
        # 编译
        echo '正在编译...'
        make -j$$(nproc)
        
        # 运行测试
        echo '正在运行测试...'
        make test
        
        # 生成覆盖率报告
        echo '正在生成覆盖率报告...'
        make coverage || true
        
        # 静态代码分析
        echo '正在进行静态代码分析...'
        cppcheck --enable=all --inconclusive --xml --xml-version=2 ../src/ 2> cppcheck-report.xml || true
        
        echo 'CI/CD流水线完成!'
      "

networks:
  xuanyu-test-net:
    driver: bridge

volumes:
  xuanyu-build:
  xuanyu-test-build:
  xuanyu-benchmark-build:
  xuanyu-demo-build:
